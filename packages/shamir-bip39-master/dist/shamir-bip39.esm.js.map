{"version":3,"file":"shamir-bip39.esm.js","sources":["../src/leftPad.ts","../src/hex.ts","../src/constants.ts","../src/tables.ts","../src/lagrange.ts","../src/recoverHex.ts","../src/recoverMnemonic.ts","../src/horner.ts","../src/splitHex.ts","../src/splitMnemonic.ts","../src/deriveHex.ts","../src/deriveShare.ts"],"sourcesContent":["/**\n * Pads a string with the given padString on the left until the specified length is achieved\n * @param str The string to pad\n * @param padString The string to add\n * @param length The desired length of the result\n */\nexport function leftPad(\n  str: string,\n  padString: string,\n  length: number\n): string {\n  while (str.length < length) {\n    str = padString + str;\n  }\n  return str;\n}\n","import { leftPad } from './leftPad';\n\nexport function isHex(hex: string): boolean {\n  return !!hex.match(/^[0-9a-fA-F]+$/);\n}\n\n/**\n * Given a hex string, return a vector of numbers, where\n * each number belongs to GF(256)\n */\nexport function hexToIntVector(hex: string): number[] {\n  /* istanbul ignore if */\n  if (!isHex(hex)) {\n    throw new Error(`Expected a hex string, but got ${hex}`);\n  }\n\n  /**\n   * Any two digit hex number belongs to GF(256), so we will split the given\n   * hex string into an array of two digit hex strings and then convert to\n   * numbers.\n   */\n\n  // If we have an odd number of digits, padd a 0 to the front to preserve the\n  // full number.\n  // Note, this will never occur with a valid BIP39 entropy\n  const paddedSecret = leftPad(hex, '0', hex.length + (hex.length % 2));\n\n  // Split the string into an array of strings with two hex characters each.\n  const splitSecret = paddedSecret.match(/.{1,2}/g) as string[];\n\n  // Convert the hex strings to integers.\n  return splitSecret.map(value => parseInt(value, 16));\n}\n","export const PRIMITIVE_POLYNOMIAL = 29;\nexport const BIT_COUNT = 8;\nexport const BIT_SIZE = 2 ** BIT_COUNT;\nexport const MAX_SHARES = BIT_SIZE - 1;\n","import { BIT_SIZE, PRIMITIVE_POLYNOMIAL, MAX_SHARES } from './constants';\n\nexport const logs: number[] = [];\nexport const exps: number[] = [];\n\nfor (let i = 0, x = 1; i < BIT_SIZE; ++i) {\n  exps[i] = x;\n  logs[x] = i;\n  x = x << 1;\n  if (x >= BIT_SIZE) {\n    x = x ^ PRIMITIVE_POLYNOMIAL;\n    x = x & MAX_SHARES;\n  }\n}\n","import { logs, exps } from './tables';\nimport { MAX_SHARES } from './constants';\n\n/**\n * Evaluate the Lagrange interpolation polynomial at x = `at`\n * using x and y Arrays that are of the same length, with\n * corresponding elements constituting points on the polynomial.\n *\n * Based on https://github.com/grempe/secrets.js/blob/14a4b682a28242b1dbe5506674b5d5f476b78dbf/secrets.js#L385\n */\nexport function lagrange(at: number, x: number[], y: number[]) {\n  let sum = 0;\n  let product;\n\n  for (let i = 0; i < x.length; i++) {\n    if (y[i]) {\n      product = logs[y[i]];\n\n      for (let j = 0; j < x.length; j++) {\n        if (i !== j) {\n          /* istanbul ignore if */\n          if (at === x[j]) {\n            // happens when computing a share that is in the list of shares used to compute it\n            product = -1; // fix for a zero product term, after which the sum should be sum^0 = sum, not sum^1\n            break;\n          }\n          product =\n            (product + logs[at ^ x[j]] - logs[x[i] ^ x[j]] + MAX_SHARES) %\n            MAX_SHARES; // to make sure it's not negative\n        }\n      }\n\n      // though exps[-1] === undefined and undefined ^ anything = anything in\n      // chrome, this behavior may not hold everywhere, so do the check\n      /* istanbul ignore next */\n      sum = product === -1 ? sum : sum ^ exps[product];\n    }\n  }\n\n  return sum;\n}\n","import { hexToIntVector } from './hex';\nimport { lagrange } from './lagrange';\nimport { leftPad } from './leftPad';\n\n/**\n * Recovers a hex secret from the given shares.\n *\n * Based on https://github.com/grempe/secrets.js/blob/14a4b682a28242b1dbe5506674b5d5f476b78dbf/secrets.js#L549\n */\nexport function recoverHex(shares: Record<string, string>) {\n  const x: number[] = [];\n  const y: number[][] = [];\n\n  // Split each share's hex data into an Array of Integers,\n  // then 'rotate' those arrays where the first element of each row is converted to\n  // its own array, the second element of each to its own Array, and so on for all of the rest.\n  // Essentially zipping all of the shares together.\n  //\n  // e.g.\n  //   [ 193, 186, 29, 150, 5, 120, 44, 46, 49, 59, 6, 1, 102, 98, 177, 196 ]\n  //   [ 53, 105, 139, 49, 187, 240, 91, 92, 98, 118, 12, 2, 204, 196, 127, 149 ]\n  //   [ 146, 211, 249, 167, 209, 136, 118, 114, 83, 77, 10, 3, 170, 166, 206, 81 ]\n  //\n  // becomes:\n  //\n  // [ [ 193, 53, 146 ],\n  //   [ 186, 105, 211 ],\n  //   [ 29, 139, 249 ],\n  //   [ 150, 49, 167 ],\n  //   [ 5, 187, 209 ],\n  //   [ 120, 240, 136 ],\n  //   [ 44, 91, 118 ],\n  //   [ 46, 92, 114 ],\n  //   [ 49, 98, 83 ],\n  //   [ 59, 118, 77 ],\n  //   [ 6, 12, 10 ],\n  //   [ 1, 2, 3 ],\n  //   [ 102, 204, 170 ],\n  //   [ 98, 196, 166 ],\n  //   [ 177, 127, 206 ],\n  //   [ 196, 149, 81 ] ]\n  //\n  Object.keys(shares).forEach(shareId => {\n    const share = hexToIntVector(shares[shareId]);\n    x.push(parseInt(shareId, 10));\n\n    for (let j = 0; j < share.length; j++) {\n      y[j] = y[j] || [];\n      y[j][x.length - 1] = share[j];\n    }\n  });\n\n  return y\n    .map(part => lagrange(0, x, part))\n    .reduce((accum, part) => {\n      const partHex = leftPad(part.toString(16), '0', 2);\n      return accum + partHex;\n    }, '');\n}\n","import { entropyToMnemonic, mnemonicToEntropy } from 'bip39';\nimport { recoverHex } from './recoverHex';\nimport { Shares } from './types';\n\nexport function recoverMnemonic(shares: Shares): string {\n  const hexShares = Object.keys(shares).reduce<Record<string, string>>(\n    (accum, id) => {\n      const hexShare = mnemonicToEntropy(shares[id]);\n\n      accum[id] = hexShare;\n      return accum;\n    },\n    {}\n  );\n  const entropy = recoverHex(hexShares);\n  return entropyToMnemonic(entropy);\n}\n","import { MAX_SHARES } from './constants';\nimport { exps, logs } from './tables';\n\n/**\n * Evaluate the given polinomial over GF(256) (with MAX_SHARES = 255)\n *\n * https://github.com/grempe/secrets.js/blob/14a4b682a28242b1dbe5506674b5d5f476b78dbf/secrets.js#L364\n */\nexport function horner(x: number, coeffs: number[]) {\n  let fx = 0;\n\n  for (let i = coeffs.length - 1; i >= 0; --i) {\n    if (fx !== 0) {\n      fx = exps[(logs[x] + logs[fx]) % MAX_SHARES] ^ coeffs[i];\n    } else {\n      fx = coeffs[i];\n    }\n  }\n\n  return fx;\n}\n","import { horner } from './horner';\nimport randomBytes from 'randombytes';\nimport { hexToIntVector } from './hex';\nimport { leftPad } from './leftPad';\n\n/**\n * Split a hex secrety into numShares, requiring threshold shares to recover.\n *\n * Note: No input validation at this point.\n * Based on https://github.com/grempe/secrets.js/blob/14a4b682a28242b1dbe5506674b5d5f476b78dbf/secrets.js#L901\n */\nexport function splitHex(secret: string, numShares: number, threshold: number) {\n  return hexToIntVector(secret)\n    .map(s => {\n      const randomValues = Array(threshold - 1)\n        .fill(0)\n        .map(() => randomBytes(1))\n        .map(buf => buf.toString('hex'))\n        .map(v => parseInt(v, 16));\n\n      const coeffs = [s].concat(randomValues);\n\n      return Array(numShares)\n        .fill(0)\n        .map((_, i) => {\n          const x = i + 1;\n          return {\n            x,\n            y: horner(x, coeffs),\n          };\n        });\n    })\n    .map(current =>\n      current.map(share => {\n        const hexY = leftPad(share.y.toString(16), '0', 2);\n        return { x: share.x.toString(), y: hexY };\n      })\n    )\n    .reduce<Record<string, string>>((accum, current) => {\n      current.forEach(share => {\n        if (!accum[share.x]) {\n          accum[share.x] = share.y;\n        } else {\n          accum[share.x] += share.y;\n        }\n      });\n      return accum;\n    }, {});\n}\n","import { entropyToMnemonic, mnemonicToEntropy } from 'bip39';\nimport { splitHex } from './splitHex';\nimport { Shares } from './types';\n\nexport function splitMnemonic(\n  mnemonic: string,\n  numShares: number,\n  threshold: number\n): Shares {\n  const entropy = mnemonicToEntropy(mnemonic);\n  const hexShares = splitHex(entropy, numShares, threshold);\n\n  return Object.keys(hexShares).reduce<Shares>((accum, id) => {\n    const mnemonicShare = entropyToMnemonic(hexShares[id]);\n\n    accum[id] = mnemonicShare;\n    return accum;\n  }, {});\n}\n","import { hexToIntVector } from './hex';\nimport { lagrange } from './lagrange';\nimport { leftPad } from './leftPad';\n\nexport function deriveHex(shares: Record<string, string>, at: number) {\n  const x: number[] = [];\n  const y: number[][] = [];\n\n  Object.keys(shares).forEach(shareId => {\n    const share = hexToIntVector(shares[shareId]);\n\n    x.push(parseInt(shareId, 10));\n\n    for (let j = 0; j < share.length; j++) {\n      y[j] = y[j] || [];\n      y[j][x.length - 1] = share[j];\n    }\n  });\n\n  return y\n    .map(part => lagrange(at, x, part))\n    .reduce((accum, part) => {\n      const partHex = leftPad(part.toString(16), '0', 2);\n      return accum + partHex;\n    }, '');\n}\n","import {\n  entropyToMnemonic,\n  mnemonicToEntropy\n} from 'bip39';\nimport { deriveHex } from './deriveHex';\nimport { Shares } from './types';\n\nexport function deriveShare(shares: Shares, at: number): Shares {\n  const hexShares = Object.keys(shares).reduce<Record<string, string>>(\n    (accum, id) => {\n      const hexShare = mnemonicToEntropy(shares[id]);\n\n      accum[id] = hexShare;\n      return accum;\n    },\n    {}\n  );\n  const entropy = deriveHex(hexShares, at);\n  const derivedShare: Record<string, string> = {};\n  derivedShare[at.toString()] = entropyToMnemonic(entropy)\n  return derivedShare;\n}\n"],"names":["leftPad","str","padString","length","isHex","hex","match","hexToIntVector","Error","paddedSecret","splitSecret","map","value","parseInt","PRIMITIVE_POLYNOMIAL","BIT_COUNT","BIT_SIZE","Math","pow","MAX_SHARES","logs","exps","i","x","lagrange","at","y","sum","product","j","recoverHex","shares","Object","keys","forEach","shareId","share","push","part","reduce","accum","partHex","toString","recoverMnemonic","hexShares","id","hexShare","mnemonicToEntropy","entropy","entropyToMnemonic","horner","coeffs","fx","splitHex","secret","numShares","threshold","s","randomValues","Array","fill","randomBytes","buf","v","concat","_","current","hexY","splitMnemonic","mnemonic","mnemonicShare","deriveHex","deriveShare","derivedShare"],"mappings":"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"}